// Generated by Dagger (https://dagger.dev).
package com.square.app;

import com.square.repository.NetworkModule;
import com.square.repository.NetworkModule_ProvidesApiServiceFactory;
import com.square.repository.RestApi;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSquareAppComponent implements SquareAppComponent {
  private final SquareAppModule squareAppModule;

  private Provider<RestApi> providesApiServiceProvider;

  private DaggerSquareAppComponent(SquareAppModule squareAppModuleParam,
      NetworkModule networkModuleParam) {
    this.squareAppModule = squareAppModuleParam;
    initialize(squareAppModuleParam, networkModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final SquareAppModule squareAppModuleParam,
      final NetworkModule networkModuleParam) {
    this.providesApiServiceProvider = DoubleCheck.provider(NetworkModule_ProvidesApiServiceFactory.create(networkModuleParam));
  }

  @Override
  public void inject(SquareApp application) {
  }

  @Override
  public SquareApp application() {
    return SquareAppModule_ProvideApplicationFactory.provideApplication(squareAppModule);}

  @Override
  public RestApi restApi() {
    return providesApiServiceProvider.get();}

  public static final class Builder {
    private SquareAppModule squareAppModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder squareAppModule(SquareAppModule squareAppModule) {
      this.squareAppModule = Preconditions.checkNotNull(squareAppModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public SquareAppComponent build() {
      Preconditions.checkBuilderRequirement(squareAppModule, SquareAppModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerSquareAppComponent(squareAppModule, networkModule);
    }
  }
}
