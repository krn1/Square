// Generated by Dagger (https://dagger.dev).
package com.square.home;

import com.square.repository.RestApi;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EmployeeListPresenter_Factory implements Factory<EmployeeListPresenter> {
  private final Provider<EmployeeListContract.View> viewProvider;

  private final Provider<RestApi> apiServiceProvider;

  private final Provider<CompositeDisposable> disposableProvider;

  public EmployeeListPresenter_Factory(Provider<EmployeeListContract.View> viewProvider,
      Provider<RestApi> apiServiceProvider, Provider<CompositeDisposable> disposableProvider) {
    this.viewProvider = viewProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.disposableProvider = disposableProvider;
  }

  @Override
  public EmployeeListPresenter get() {
    return newInstance(viewProvider.get(), apiServiceProvider.get(), disposableProvider.get());
  }

  public static EmployeeListPresenter_Factory create(
      Provider<EmployeeListContract.View> viewProvider, Provider<RestApi> apiServiceProvider,
      Provider<CompositeDisposable> disposableProvider) {
    return new EmployeeListPresenter_Factory(viewProvider, apiServiceProvider, disposableProvider);
  }

  public static EmployeeListPresenter newInstance(Object view, RestApi apiService,
      CompositeDisposable disposable) {
    return new EmployeeListPresenter((EmployeeListContract.View) view, apiService, disposable);
  }
}
